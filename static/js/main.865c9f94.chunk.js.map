{"version":3,"sources":["Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","state","favorites","movies","saveFavorites","bind","addToFavorites","removeFromFavorites","window","addEventListener","this","favs","JSON","parse","localStorage","getItem","setState","getData","removeEventListener","console","log","setItem","stringify","movie","e","includes","target","style","color","preventDefault","filter","favorite","fetch","then","response","json","data","catch","err","className","length","map","fav","i","key","onClick","title","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAiGeA,E,YA9FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAW,GACXC,OAAQ,IAEZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,gBARZ,E,iFAYfG,OAAOC,iBAAiB,eAAgBC,KAAKN,eAC7C,IAAIO,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GAC9DL,KAAKM,SAAS,CAAEd,UAAWS,IAC3BD,KAAKO,Y,6CAILP,KAAKN,gBACLI,OAAOU,oBAAoB,eAAgBR,KAAKN,iB,sCAIhDe,QAAQC,IAAI,qBACZN,aAAaO,QAAQ,cAAeT,KAAKU,UAAUZ,KAAKT,MAAMC,c,qCAGnDqB,EAAOC,GACdd,KAAKT,MAAMC,UAAUuB,SAASF,IAC9Bb,KAAKH,oBAAoBgB,GACzBC,EAAEE,OAAOC,MAAMC,MAAQ,UAEvBJ,EAAEK,iBACFL,EAAEE,OAAOC,MAAMC,MAAQ,QACvBlB,KAAKM,SAAS,CAAEd,UAAU,GAAD,mBAAMQ,KAAKT,MAAMC,WAAjB,CAA4BqB,S,0CAIzCA,GAChBb,KAAKM,SAAS,CAAEd,UAAU,YAAKQ,KAAKT,MAAMC,UAAU4B,QAAO,SAAAC,GAAQ,OAAIA,IAAaR,U,gCAG7E,IAAD,OACNS,MAAM,iFACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKpB,SAAS,CAAEb,OAAQiC,IACxBjB,QAAQC,IAAI,eAAgBgB,MAE7BC,OAAM,SAAAC,GACLnB,QAAQC,IAAI,sBAAwBkB,Q,+BAIlC,IAAD,OACCnC,EAASO,KAAKT,MAAME,OACpBD,EAAYQ,KAAKT,MAAMC,UAC7B,OACI,yBAAKqC,UAAU,QACX,6CACA,8CAEsB,IAArBrC,EAAUsC,OACP,yBAAKD,UAAU,SAAf,2CAEJrC,EAAUuC,KAAI,SAACC,EAAKC,GAChB,OACI,yBAAKJ,UAAU,QAAQK,IAAKF,GACxB,8BAAOC,EAAE,EAAT,KACA,8BAAOD,GACP,0BAAMG,QAAS,SAACrB,GAAD,OAAO,EAAKjB,oBAAoBmC,KAA/C,WAOZ,2CACCvC,EAAOsC,KAAI,SAAAlB,GACR,OACI,yBAAKgB,UAAU,QAAQK,IAAKrB,EAAMuB,MAAOD,QAAS,SAACrB,GAAD,OAAO,EAAKlB,eAAeiB,EAAMuB,MAAOtB,KACtF,8BAAOD,EAAMuB,gB,GArFjBC,IAAMC,W,MCWfC,MATf,WACE,OACE,yBAAKV,UAAU,OACb,yDACA,kBAAC,EAAD,QCIcW,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.865c9f94.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            favorites: [],\n            movies: [],\n        };\n        this.saveFavorites = this.saveFavorites.bind(this);\n        this.addToFavorites = this.addToFavorites.bind(this);\n        this.removeFromFavorites = this.removeFromFavorites.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.saveFavorites)\n        let favs = JSON.parse(localStorage.getItem('myFavorites')) || []\n        this.setState({ favorites: favs })\n        this.getData();\n    }\n\n    componentWillUnmount() {\n        this.saveFavorites()\n        window.removeEventListener('beforeunload', this.saveFavorites)\n    }\n\n    saveFavorites() {\n        console.log('saving favorites!')\n        localStorage.setItem('myFavorites', JSON.stringify(this.state.favorites))\n    }\n\n    addToFavorites(movie, e){\n        if (this.state.favorites.includes(movie)) {\n            this.removeFromFavorites(movie)\n            e.target.style.color = 'black'\n        } else {\n            e.preventDefault();\n            e.target.style.color = 'green'\n            this.setState({ favorites: [...this.state.favorites, movie] })\n        }\n    }\n\n    removeFromFavorites(movie){\n        this.setState({ favorites: [...this.state.favorites.filter(favorite => favorite !== movie)]})\n    }\n\n    getData() {\n        fetch(\"https://raw.githubusercontent.com/aaroncaraway/data/master/2019moviesALL.json\")\n          .then(response => {\n            return response.json();\n          })\n          .then(data => {\n            this.setState({ movies: data });\n            console.log('getting here', data)\n          })\n          .catch(err => {\n            console.log(\"Error Reading data \" + err);\n          });\n      }\n\n    render() {\n        const movies = this.state.movies;\n        const favorites = this.state.favorites;\n        return (\n            <div className=\"main\">\n                <h2> 2019 Movies </h2>\n                <h3> My Favorites </h3>\n                \n                {favorites.length === 0 ? ( \n                    <div className=\"movie\"> Click title below to add to favorites </div>\n                ) : (\n                favorites.map((fav, i) => {\n                    return(\n                        <div className=\"movie\" key={fav}>\n                            <span>{i+1})</span>\n                            <span>{fav}</span>\n                            <span onClick={(e) => this.removeFromFavorites(fav)}> R </span>\n                        </div>\n                    )\n                })\n                )\n                }\n\n                <h3> All Movies</h3>\n                {movies.map(movie => {\n                    return (\n                        <div className=\"movie\" key={movie.title} onClick={(e) => this.addToFavorites(movie.title, e)}>\n                            <span>{movie.title}</span>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n}\n\nexport default Dashboard;","import React from 'react';\nimport Dashboard from \"./Dashboard.js\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> Welcome to MOOvie Ranker</h1>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}